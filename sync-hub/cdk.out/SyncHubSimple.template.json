{
 "Resources": {
  "SettingsTable4DB0CCD0": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "tenant_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "setting_id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "tenant_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "setting_id",
      "KeyType": "RANGE"
     }
    ],
    "TableName": "sync-hub-settings"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/SettingsTable/Resource"
   }
  },
  "ApiFunctionServiceRole52B9747B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/ApiFunction/ServiceRole/Resource"
   }
  },
  "ApiFunctionServiceRoleDefaultPolicy20A32B8D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SettingsTable4DB0CCD0",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ApiFunctionServiceRoleDefaultPolicy20A32B8D",
    "Roles": [
     {
      "Ref": "ApiFunctionServiceRole52B9747B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/ApiFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ApiFunctionCE271BD4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nimport json\nimport uuid\nimport time\nimport boto3\nimport os\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table(os.environ['SETTINGS_TABLE'])\n\ndef handler(event, context):\n    try:\n        method = event.get(\"requestContext\", {}).get(\"http\", {}).get(\"method\")\n        path = event.get(\"requestContext\", {}).get(\"http\", {}).get(\"path\")\n        \n        if path == \"/_health\":\n            return {\n                \"statusCode\": 200,\n                \"headers\": {\"Content-Type\": \"application/json\"},\n                \"body\": json.dumps({\"ok\": True, \"message\": \"Sync Hub API is running!\"})\n            }\n        \n        if path == \"/settings/public\":\n            response = table.scan(\n                FilterExpression=\"is_public = :public\",\n                ExpressionAttributeValues={\":public\": True}\n            )\n            return {\n                \"statusCode\": 200,\n                \"headers\": {\"Content-Type\": \"application/json\"},\n                \"body\": json.dumps({\"settings\": response.get(\"Items\", [])})\n            }\n        \n        if path == \"/settings\" and method == \"POST\":\n            body = json.loads(event.get(\"body\", \"{}\"))\n            setting = {\n                \"tenant_id\": \"default\",\n                \"setting_id\": str(uuid.uuid4()),\n                \"name\": body.get(\"name\", \"Sample Setting\"),\n                \"value\": body.get(\"value\", \"Sample Value\"),\n                \"is_public\": body.get(\"is_public\", True),\n                \"created_at\": int(time.time())\n            }\n            table.put_item(Item=setting)\n            return {\n                \"statusCode\": 201,\n                \"headers\": {\"Content-Type\": \"application/json\"},\n                \"body\": json.dumps(setting)\n            }\n        \n        return {\n            \"statusCode\": 404,\n            \"headers\": {\"Content-Type\": \"application/json\"},\n            \"body\": json.dumps({\"error\": \"Not found\"})\n        }\n        \n    except Exception as e:\n        return {\n            \"statusCode\": 500,\n            \"headers\": {\"Content-Type\": \"application/json\"},\n            \"body\": json.dumps({\"error\": str(e)})\n        }\n"
    },
    "Environment": {
     "Variables": {
      "SETTINGS_TABLE": {
       "Ref": "SettingsTable4DB0CCD0"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "ApiFunctionServiceRole52B9747B",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "ApiFunctionServiceRoleDefaultPolicy20A32B8D",
    "ApiFunctionServiceRole52B9747B"
   ],
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/ApiFunction/Resource"
   }
  },
  "ApiFunctionApiGatewayInvoke7E8DD105": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiFunctionCE271BD4",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "HttpApiF5A9A8A7"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/ApiFunction/ApiGatewayInvoke"
   }
  },
  "HttpApiF5A9A8A7": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "CorsConfiguration": {
     "AllowHeaders": [
      "*"
     ],
     "AllowMethods": [
      "*"
     ],
     "AllowOrigins": [
      "*"
     ]
    },
    "Name": "sync-hub-simple-api",
    "ProtocolType": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/HttpApi/Resource"
   }
  },
  "HttpApiDefaultStage3EEB07D6": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "AutoDeploy": true,
    "StageName": "$default"
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/HttpApi/DefaultStage/Resource"
   }
  },
  "LambdaIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::GetAtt": [
      "ApiFunctionCE271BD4",
      "Arn"
     ]
    },
    "PayloadFormatVersion": "2.0"
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/LambdaIntegration"
   }
  },
  "RouteGEThealth": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "RouteKey": "GET /_health",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "LambdaIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/RouteGET_health"
   }
  },
  "RouteGETsettingspublic": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "RouteKey": "GET /settings/public",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "LambdaIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/RouteGETsettingspublic"
   }
  },
  "RoutePOSTsettings": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "RouteKey": "POST /settings",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "LambdaIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/RoutePOSTsettings"
   }
  },
  "ApiUrlParam8AD347B3": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": "/sync-hub/api/url",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "HttpApiF5A9A8A7",
      "ApiEndpoint"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/ApiUrlParam/Resource"
   }
  },
  "SettingsTableParam7CBA4B03": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": "/sync-hub/data/settings-table",
    "Type": "String",
    "Value": {
     "Ref": "SettingsTable4DB0CCD0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/SettingsTableParam/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/01Py27DIBD8ltzxtnbyA1Wkqj3VcnOv1pi62xiwYGlkIf49QJSop5nZx8xuB117gOcdXnwjp3Oz0Ajxk1GeRS59xWkzqO2UiyccFyWO36aSJBbU44QQX4ORTNaU1n/eK6fJ+6ySINQQB3vbr9jbheRW5ypLAleakdUFt78O4hvz+rJSGShQZL5qrgYP8m5YzQ7viYMNnA/zXpcXHJm5R4dasXI16C5SEoPyNjhZXT4Cr4GT6Df+seZpD20Hbbv79USNC4ZJKxhueAXQiYaELgEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "SyncHubSimple/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "ApiUrl": {
   "Value": {
    "Fn::GetAtt": [
     "HttpApiF5A9A8A7",
     "ApiEndpoint"
    ]
   }
  },
  "SettingsTableName": {
   "Value": {
    "Ref": "SettingsTable4DB0CCD0"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}